// Printify API統合 - 商品作成エンドポイント
export default async function handler(req, res) {
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }

    try {
        const { shopId, imageId, title, description, tags } = req.body;
        const apiKey = process.env.PRINTIFY_API_KEY;

        if (!apiKey) {
            return res.status(500).json({ error: 'PRINTIFY_API_KEY is not configured' });
        }

        if (!shopId || !imageId) {
            return res.status(400).json({ error: 'shopId and imageId are required' });
        }

        // Printify商品作成
        // Blueprint ID: 6 = Gildan 5000 (ベーシックTシャツ)
        // Print Provider: 3 = MyLocker (安定したプロバイダー)
        const blueprintId = 6;
        const printProviderId = 3;

        // 1. まず利用可能なvariantsを取得
        const variantsResponse = await fetch(
            `https://api.printify.com/v1/catalog/blueprints/${blueprintId}/print_providers/${printProviderId}/variants.json`,
            {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${apiKey}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        if (!variantsResponse.ok) {
            const errorText = await variantsResponse.text();
            throw new Error(`Printify Variants API error: ${variantsResponse.status} - ${errorText}`);
        }

        const variantsData = await variantsResponse.json();
        console.log(`Total variants available: ${variantsData.variants?.length}`);
        if (variantsData.variants?.length > 0) {
            console.log('Sample variant structure:', JSON.stringify(variantsData.variants[0], null, 2));
        }

        // 注意: Printifyは商品作成後に自動的にモックアップを生成します
        // API経由でのモックアップ設定はサポートされていないため、
        // Printify Webダッシュボードでモックアップをカスタマイズしてください
        console.log('Mockups will be auto-generated by Printify after product creation');

        // 利用可能なvariantから色×サイズの組み合わせを抽出
        const availableVariants = variantsData.variants || [];
        const selectedVariants = [];
        const variantIds = [];

        // サイズ優先順位（S, M, L, XL, 2XL）
        const sizePreference = ['S', 'M', 'L', 'XL', '2XL'];

        // 色の優先順位（合計7色）
        // 1. White（白）- 必須
        // 2. Black（黒）- 必須
        // 3-4. White系（Ash, Natural, etc.）
        // 5-6. Black/Dark系（Dark Heather, Charcoal, etc.）
        // 7. Gray系
        const colorPriority = [
            { keywords: ['WHITE'], priority: 1, name: 'White' },
            { keywords: ['BLACK'], priority: 1, name: 'Black' },
            { keywords: ['ASH', 'NATURAL', 'CREAM', 'SAND'], priority: 2, name: 'Light' },
            { keywords: ['DARK HEATHER', 'CHARCOAL', 'NAVY'], priority: 3, name: 'Dark' },
            { keywords: ['GRAY', 'GREY', 'SPORT GREY', 'HEATHER'], priority: 4, name: 'Gray' },
        ];

        // 色ごとにバリアントをグループ化
        const colorGroups = new Map();

        // Debug: Log first few variant titles to understand format
        console.log('Sample variant titles:', availableVariants.slice(0, 5).map(v => v.title));

        for (const variant of availableVariants) {
            if (!variant.title) continue;

            const upperTitle = variant.title.toUpperCase();

            // サイズをチェック（さらに柔軟なマッチング）
            const matchedSize = sizePreference.find(size => {
                // "S / White", "S/White", "White / S", "Small", etc.
                const patterns = [
                    ` ${size} `,
                    `/${size}/`,
                    ` ${size}/`,
                    `/${size} `,
                    `\t${size}\t`,
                    `\t${size} `,
                    ` ${size}\t`
                ];
                return patterns.some(pattern => upperTitle.includes(pattern)) ||
                       upperTitle.startsWith(`${size} `) ||
                       upperTitle.startsWith(`${size}/`) ||
                       upperTitle.endsWith(` ${size}`) ||
                       upperTitle.endsWith(`/${size}`);
            });

            // If size check is too strict, skip it for now - just get all variants
            // We'll filter by size later if needed

            // 色を判定（より柔軟に）
            let matchedColor = null;
            for (const colorDef of colorPriority) {
                if (colorDef.keywords.some(keyword => upperTitle.includes(keyword))) {
                    matchedColor = colorDef;
                    break;
                }
            }

            // If no color matched but variant exists, assign to "Other" group
            if (!matchedColor) {
                matchedColor = { name: 'Other', priority: 5, keywords: [] };
            }

            const colorKey = matchedColor.name;
            if (!colorGroups.has(colorKey)) {
                colorGroups.set(colorKey, {
                    priority: matchedColor.priority,
                    name: colorKey,
                    variants: []
                });
            }

            colorGroups.get(colorKey).variants.push(variant);
        }

        console.log('Color groups after matching:', Array.from(colorGroups.keys()));

        // 優先順位順に並べ替え
        const sortedColors = Array.from(colorGroups.values()).sort((a, b) => a.priority - b.priority);

        console.log('Available color groups:', sortedColors.map(c => `${c.name} (${c.variants.length} variants)`));

        // 最大7色、各色で全サイズを選択
        const maxColors = 7;
        for (let i = 0; i < Math.min(maxColors, sortedColors.length); i++) {
            const colorGroup = sortedColors[i];
            console.log(`Selecting color group: ${colorGroup.name}`);

            for (const variant of colorGroup.variants) {
                selectedVariants.push({
                    id: variant.id,
                    price: 2500, // 基本価格2500円
                    is_enabled: true
                });
                variantIds.push(variant.id);
            }
        }

        console.log(`Total variants selected: ${selectedVariants.length}`);
        console.log('Sample selected variants:', selectedVariants.slice(0, 3).map(v => {
            const fullVariant = availableVariants.find(av => av.id === v.id);
            return fullVariant?.title || v.id;
        }));

        // variantが見つからない場合は最初の35個を使用（7色×5サイズ）
        if (selectedVariants.length === 0) {
            console.warn('No variants matched criteria, using first 35 variants');
            for (let i = 0; i < Math.min(35, availableVariants.length); i++) {
                selectedVariants.push({
                    id: availableVariants[i].id,
                    price: 2500,
                    is_enabled: true
                });
                variantIds.push(availableVariants[i].id);
            }
        }

        const printifyApiUrl = `https://api.printify.com/v1/shops/${shopId}/products.json`;

        const payload = {
            title: title || 'Custom Japanese Culture T-Shirt',
            description: description || 'AI-generated unique Japanese-themed t-shirt design. Perfect souvenir for tourists visiting Japan.',
            blueprint_id: blueprintId,
            print_provider_id: printProviderId,
            variants: selectedVariants,
            print_areas: [
                {
                    variant_ids: variantIds,
                    placeholders: [
                        {
                            position: 'front',
                            images: [
                                {
                                    id: imageId,
                                    x: 0.5, // Center horizontal
                                    y: 0.45, // Slightly above center for better appearance
                                    scale: 0.95, // 95% size to prevent cropping
                                    angle: 0
                                }
                            ]
                        }
                    ]
                }
            ],
            // Note: Printify APIではmockupsは商品作成後に別途設定する必要がある
            // ここでは基本的な商品構造のみを作成
            tags: tags || ['Japanese Culture', 'AI Generated', 'Custom Design', 'Tourist Souvenir'],
            // デフォルトでドラフトとして作成（後で確認してから公開）
            is_locked: false
        };

        const response = await fetch(printifyApiUrl, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Printify Product Creation error: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        const productId = result.id;

        console.log('Product created successfully:', productId);
        console.log('Printify will auto-generate mockups for this product');

        // 色グループの詳細情報を作成
        const actualColorsUsed = sortedColors.slice(0, Math.min(maxColors, sortedColors.length));
        const selectedColorNames = actualColorsUsed.map(c => c.name).join(', ') || 'Default selection';
        const actualColorCount = actualColorsUsed.length || Math.ceil(selectedVariants.length / 5);
        const estimatedSizesPerColor = actualColorCount > 0 ? Math.floor(selectedVariants.length / actualColorCount) : 5;

        res.status(200).json({
            productId: productId,
            productUrl: `https://printify.com/app/products/${productId}`,
            message: `✅ Product created successfully!

📦 Product Details:
• ${selectedVariants.length} variants created
• Color groups: ${actualColorCount} (${selectedColorNames})
• Approx. ${estimatedSizesPerColor} sizes per color
• Design positioned at center (y=0.45, scale=0.95)
• Price: ¥2,500 per item
• English title & description for international reach

⚠️ Mockups:
Printify automatically generates mockups after product creation.
Visit the product page to view and customize mockups.

🎯 Next Steps:
1. Visit Printify dashboard to review product
2. Check mockups in "Edit design" section (auto-generated)
3. Verify all color/size combinations are correct
4. Customize mockups if needed ("View all mockups" shows 50+ options)
5. Publish to your store when ready

Product URL: https://printify.com/app/products/${productId}`
        });

    } catch (error) {
        console.error('Error in /api/printify-create-product:', error);
        res.status(500).json({ error: error.message });
    }
}